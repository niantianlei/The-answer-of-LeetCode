201. Bitwise AND of Numbers Range
Given a range [m, n] where 0 <= m <= n <= 2147483647, 
return the bitwise AND of all numbers in this range, inclusive.
For example, given the range [5, 7], you should return 4.
*************************************************************************
public class Solution {
    public int rangeBitwiseAnd(int m, int n) {
        int r=Integer.MAX_VALUE;
        while((m&r)!=(n&r))  r=r<<1;
        return n&r;
    }
}
--------------------------------------------------------------------------
202. Happy Number
Example: 19 is a happy number

1^2 + 9^2 = 82//1的平方
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1
*************************************************************************
public class Solution {
    public boolean isHappy(int n) {
        HashSet<Integer> set = new HashSet<Integer>();
        set.add(n);
        while (n != 1) {
            int result = 0;
            while (n != 0) {
                result += Math.pow(n % 10, 2);
                n /= 10;
            }
            if (set.contains(result)) {
                return false;
            }
            set.add(result);
            n = result;
        }
        return true;
    }
}
--------------------------------------------------------------------------
203. Remove Linked List Elements
Remove all elements from a linked list of integers that have value val.
Example
Given: 1 --> 2 --> 6 --> 3 --> 4 --> 5 --> 6, val = 6
Return: 1 --> 2 --> 3 --> 4 --> 5
*************************************************************************
public class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode s = new ListNode(-1);
        s.next = head;
        ListNode cur = head;
        ListNode prev = s;
        
        while(cur != null) {
            if(cur.val == val) {
                prev.next = cur.next;
            } else {
                prev = prev.next;
            }
            cur = cur.next;
        }
        return s.next;   //不能用head因为head也许会被遗弃，例如head.val == val;
    }
}
--------------------------------------------------------------------------
204. Count Primes
Count the number of prime numbers less than a non-negative number, n.        
*************************************************************************
public class Solution {
    public int countPrimes(int n) {
        boolean[] notPrime = new boolean[n];
        int count = 0;
        for (int i = 2; i < n; i++) {
            if (notPrime[i] == false) {
                count++;
                for (int j = 2; i*j < n; j++) {
                    notPrime[i*j] = true;
                }
            }
        }
        return count;
    }
}
--------------------------------------------------------------------------
205. Isomorphic Strings
For example,
Given "egg", "add", return true.
Given "foo", "bar", return false.
Given "paper", "title", return true.
*************************************************************************
public class Solution {
    public boolean isIsomorphic(String s, String t) {
        int[] m = new int[512];
        for (int i = 0; i < s.length(); i++) {
            if (m[s.charAt(i)] != m[t.charAt(i) + 256]) return false;
            m[t.charAt(i)+256] = i + 1;
            m[s.charAt(i)] = i + 1;
        }
        return true;
    }
}
//或者用两个数组(ASCII码只有256个字符)。思想是：用数组（哈希表）保存每个字符最后出现的位置
public class Solution {
    public boolean isIsomorphic(String s, String t) {
        int[] m = new int[256];
        int[] n = new int[256];
        for(int i = 0; i < s.length(); i++) {
            if(m[s.charAt(i)] != n[t.charAt(i)]) return false;
            m[s.charAt(i)] = i + 1;
            n[t.charAt(i)] = i + 1;
        }
        return true;
    }
}
//或
public class Solution {
    public boolean isIsomorphic(String s, String t) {
        Map<Character,Character> map = new HashMap<>();
        Set<Character> set= new HashSet<>();
        
        for(int i = 0; i < s.length(); i++) {
            if(!map.containsKey(s.charAt(i))) {
                if(set.contains(t.charAt(i))) {
                    return false;
                } else {
                    map.put(s.charAt(i), t.charAt(i));
                    set.add(t.charAt(i));
                }
                
            } else {
                if(map.get(s.charAt(i)) != t.charAt(i)) {
                    return false;
                }
            }
        }
        return true;
    }
}
--------------------------------------------------------------------------
206. Reverse Linked List
*************************************************************************
//反转双向链表
非递归方法
public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode curr = head;
    while (curr != null) {
        ListNode nextTemp = curr.next;
        curr.next = prev;
	curr.prev = next;   //反转双向链表,仅加这一行
        prev = curr;
        curr = nextTemp;
    }
    return prev;
}
递归方法（单链表）
public ListNode reverseList(ListNode head) {
    if (head == null || head.next == null) return head;
    ListNode p = reverseList(head.next);
    head.next.next = head;    //反转结点
    head.next = null;         //第一个结点反转后，后继为null
    return p;
}
--------------------------------------------------------------------------
209. Minimum Size Subarray Sum
Given an array of n positive integers and a positive integer s, 
find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.
For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.
*************************************************************************
public class Solution {
	public int minSubArrayLen(int s, int[] nums) {
		if(nums == null || nums.length ==0) return 0;
        int i = 0, j = 0, sum = 0, min = Integer.MAX_VALUE;
        while(j < nums.length) {
            sum += nums[j++];
            while(sum >= s) {
                min = Math.min(min, j - i);
                sum -= nums[i++];
            }
        }
        return min == Integer.MAX_VALUE ? 0 : min;//注意
	}
}
--------------------------------------------------------------------------
215. Kth Largest Element in an Array
*************************************************************************
//建堆O(NlgK) time + O(K)memory
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for(int i = 0; i < k; i++) {
            pq.offer(nums[i]);
        }
        for(int i = k; i < nums.length; i++) {
            if(pq.peek() < nums[i]) {
                pq.offer(nums[i]);
                pq.poll();
            }
        }
        return pq.peek();
    }
}
//用快排
public class Solution {
    public int findKthLargest(int[] a, int k){
		int lo = 0, hi = a.length - 1;
        k = a.length - k;
        shuffle(a);
		while(hi > lo){
			int j = partition(a, lo, hi);
			if( j == k ) return a[k];
			else if(j > k) hi = j - 1;
			else if(j < k) lo = j + 1;
		}
		return a[k];
	}
    public int partition(int[] a, int lo, int hi){
		int i = lo, j = hi + 1;	//左右扫描指针
		int v = a[lo];   		//切分元素
		while(true){  			//扫描左右，检查扫描是否结束并交换元素
			while(a[++i] < v) if(i == hi) break;
			while(v < a[--j]) if(j == lo) break;
			if(i >= j) break;
			swap(a, i, j);
		}
		swap(a, lo, j);			//将v = a[j]放入正确的位置
		return j;				//a[lo...j-1] <= a[j] <= a[j+1...hi] 达成
	}
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public void shuffle(int[] nums) {
        Random random = new Random();
        for(int ind = 1; ind < nums.length; ind++) {
            final int r = random.nextInt(ind + 1);
            swap(nums, ind, r);
        }
    }
}
//Arrays.sort();测试最快
--------------------------------------------------------------------------

216. Combination Sum III
Find all possible combinations of k numbers that add up to a number n, given that 
only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
Example 1: Input: k = 3, n = 7
Output:
[[1,2,4]]
Example 2: Input: k = 3, n = 9
Output:
[[1,2,6], [1,3,5], [2,3,4]]
*************************************************************************
public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ans = new LinkedList<>();
        combination(ans, new LinkedList<Integer>(), k, 1, n);
        return ans;
    }
    public void combination(List<List<Integer>> ans, List<Integer> list, int k, int start, int n) {
        if(k == 0 && n == 0) {
            ans.add(new LinkedList<>(list));
        } else if (k > 0 && n > 0) {
            for(int i = start; i < 10; i++) {
                list.add(i);
                combination(ans, list, k - 1, i + 1, n - i);
                list.remove(list.size()-1);
            }
        }
        
    }
}
--------------------------------------------------------------------------
217. Contains Duplicate
*************************************************************************
public class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> hs = new HashSet<>();
        for(int i = 0; i < nums.length; i++) {
            if(!hs.contains(nums[i])) {
                hs.add(nums[i]);
            } else{
                return true;
            }
        }
        return false;
    }
}
--------------------------------------------------------------------------
219. Contains Duplicate II
Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that 
nums[i] = nums[j] and the absolute difference between i and j is at most k.
*************************************************************************
public class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < nums.length; i++) {
            if(map.containsKey(nums[i])) {
                if(i - map.get(nums[i]) <= k) return true;
            }
            map.put(nums[i], i);
        }
        return false;
    }
}
--------------------------------------------------------------------------
221. Maximal Square
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.
For example, given the following matrix:
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Return 4.
*************************************************************************
class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int rows = matrix.length, cols = matrix[0].length, res = 0;
        int[][] dp = new int[rows+1][cols+1];
        for(int i = 1; i <= rows; i++) {
            for(int j = 1; j <= cols; j++) {
                if(matrix[i-1][j-1] == '1') {
                    dp[i][j] = Math.min(Math.min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1;
                    res = Math.max(res, dp[i][j]);
                }
            }
        }
        return res * res;
    }
}
--------------------------------------------------------------------------
222. Count Complete Tree Nodes
设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树
*************************************************************************
class Solution {
    public int countNodes(TreeNode root) {
        if(root == null) return 0;
        int lh = height(root.left);
        int rh = height(root.right);
        if(lh == rh) return (1 << lh) + countNodes(root.right);  //1(根节点) + (1<<lh)-1(完全左子树) + number of rightNode 
        else return (1 << rh) + countNodes(root.left);		//1(根节点) + (1<<rh)-1(完全右子树) + number  of leftNode 
    }
    
    public int height(TreeNode root) {
        if(root == null) return 0;
        return 1 + height(root.left);
    }
}

//如果不是完全二叉树的话
if(root == null) return 0;
return 1 + countNodes(root.left) + countNodes(root.right);
--------------------------------------------------------------------------
225. Implement Stack using Queues
两个队列实现栈――入栈，直接进q1，出栈，把q1除最后一个元素外全部转移到队q2中,然后把刚才剩下q1中的那个元素出队列。之后把q2中的全部元素转移回q1中

s1是入栈的，s2是出栈的。
入队列：直接压入s1即可
出队列：如果s2不为空，把s2中的栈顶元素直接弹出；否则，把s1的所有元素全部弹出压入s2中，再弹出s2的栈顶元素
*************************************************************************
public class MyStack {
    Queue<Integer> queue = new LinkedList<>();
    /** Initialize your data structure here. */
    public MyStack() {
        
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        queue.offer(x);
        for(int i = 1; i < queue.size(); i++) {
            queue.offer(queue.remove());
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        return queue.remove();
    }
    
    /** Get the top element. */
    public int top() {
        return queue.peek();    
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return queue.isEmpty();
    }
}
//【解法二：用两个队列，push: O(1)，pop: O(n)，top: O(n)】
public class MyStack {
    Queue<Integer> q1 = new LinkedList<>();
    Queue<Integer> q2 = new LinkedList<>();
    /** Initialize your data structure here. */
    public MyStack() {
        
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        q1.offer(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        while(q1.size() > 1) {
            q2.offer(q1.remove());
        }
        int temp = q1.remove();
        while(!q2.isEmpty()) {
            q1.offer(q2.remove());
        }
        return temp;
    }
    
    public int top() {
        while(q1.size() > 1) {
            q2.offer(q1.remove());
        }
        int temp = q1.peek();
        q2.offer(q1.remove());
        while(!q2.isEmpty()) {
            q1.offer(q2.remove());
        }
        return temp;
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return q1.isEmpty();
    }
}
//【解法二：用两个队列，push: O(n)，pop: O(1)，top: O(1)】将后添加的元素放到q1的最前端
public class MyStack {
    Queue<Integer> q1 = new LinkedList<>();
    Queue<Integer> q2 = new LinkedList<>();
    /** Initialize your data structure here. */
    public MyStack() {
        
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        q2.offer(x);
        while(!q1.isEmpty()) {
            q2.offer(q1.poll());
        }
        while(!q2.isEmpty()) {
            q1.offer(q2.poll());
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        return q1.poll();
    }
    
    public int top() {
        return q1.peek();
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return q1.isEmpty();
    }
}
--------------------------------------------------------------------------
226. Invert Binary Tree
Invert a binary tree.

     4
   /   \
  2     7
 / \   / \
1   3 6   9
to
     4
   /   \
  7     2
 / \   / \
9   6 3   1
*************************************************************************
public class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null) return null;
        TreeNode tmp = root.left;
        root.left = invertTree(root.right);
        root.right = invertTree(tmp);
        return root;
    }
}
--------------------------------------------------------------------------
227. Basic Calculator II
Implement a basic calculator to evaluate a simple expression string.

The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . The integer division should truncate toward zero.

You may assume that the given expression is always valid.

Some examples:
"3+2*2" = 7
" 3/2 " = 1
" 3+5 / 2 " = 5
Note: Do not use the eval built-in library function.
*************************************************************************
class Solution {
    public int calculate(String s) {
        if(s == null || s.length() == 0) return 0;
        int len = s.length();
        Stack<Integer> stack = new Stack<>();
        int num = 0;
        char sign = '+';
        for(int i = 0; i < len; i++) {
            if(Character.isDigit(s.charAt(i))) {
                num = num * 10 + s.charAt(i) - '0';
            }
            if(!Character.isDigit(s.charAt(i)) && ' ' != s.charAt(i) || i == len - 1) {
                if(sign == '-') {
                    stack.push(-num);
                } else if (sign == '+') {
                    stack.push(num);
                } else if (sign == '*') {
                    stack.push(stack.pop() * num);
                } else if (sign == '/') {
                    stack.push(stack.pop() / num);
                }
                sign = s.charAt(i);
                num = 0;
            }
        }
        int res = 0;
        for(int i : stack) {
            res += i;
        }
        return res;
    }
}
--------------------------------------------------------------------------
228. Summary Ranges
Given a sorted integer array without duplicates, return the summary of its ranges.
For example, given [0,1,2,4,5,7], return ["0->2","4->5","7"].
*************************************************************************
public class Solution {
    public List<String> summaryRanges(int[] nums) {
        List<String> list = new LinkedList<>();
        if(nums == null || nums.length == 0) return list;
        for(int i = 0; i < nums.length; i++) {
            int a = nums[i];
            while(i + 1 < nums.length && (nums[i + 1] - nums[i]) == 1) {
                i++;
            }
            if(a != nums[i]) {
                list.add(a + "->" + nums[i]);
            } else {
                list.add(String.valueOf(nums[i]));       
            }
        }
        return list;
    }
}
--------------------------------------------------------------------------

229. Majority Element II
Given an integer array of size n, find all elements that appear more than floor(n/3) times. 
The algorithm should run in linear time and in O(1) space.
*************************************************************************
public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> res = new ArrayList<>();
        if(nums == null || nums.length == 0) return res;
        int num1 = nums[0], num2 = nums[0], count1 = 0, count2 = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == num1) {
                count1++;
            } else if (nums[i] == num2) {
                count2++;
            } else if (count1 == 0) {
                num1 = nums[i];
                count1 = 1;
            } else if (count2 == 0) {
                num2 = nums[i];
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        
        count1 = 0;
        count2 = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == num1) {
                count1++;
            } else if (nums[i] == num2) {
                count2++;
            }
        }
        if(count1 > nums.length / 3) res.add(num1);
        if(count2 > nums.length / 3) res.add(num2);
        return res;
    }
}
--------------------------------------------------------------------------
230. Kth Smallest Element in a BST
*************************************************************************
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> stack = new Stack<>();

        while(!stack.isEmpty() || root != null) {
            if(root != null) {
                stack.push(root);
                root = root.left;
            } else {
                TreeNode node = stack.pop();
                k--;
                if(k == 0) return node.val;
                root = node.right;
            }
        }
        return 0;
    }
}
--------------------------------------------------------------------------
231.Power of Two
Given an integer, write a function to determine if it is a power of two.
*************************************************************************
public class Solution {
    public boolean isPowerOfTwo(int n) {
        if(n==0) return false;
        while(n%2==0) n/=2;
        return (n==1);
        //return n>0 && Integer.bitCount(n) == 1;
    }
}
或
public class Solution {
    public boolean isPowerOfTwo(int n) {
        if(n <= 0) return false;
	//将最后一个1变为0
        return (n&(n-1)) == 0;
    }
}
--------------------------------------------------------------------------

232. Implement Queue using Stacks
*************************************************************************
public class MyQueue {
    Stack<Integer> in = new Stack<>();
    Stack<Integer> out = new Stack<>();
    /** Initialize your data structure here. */
    public MyQueue() {
        
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        in.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        peek();
        return out.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        if (out.empty())
            while (!in.empty())
                out.push(in.pop());
        return out.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return in.empty() && out.empty();
    }
}
--------------------------------------------------------------------------
233. Number of Digit One
Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.
For example:
Given n = 13,
Return 6, because digit 1 occurred in the following numbers: 1, 10, 11, 12, 13.
*************************************************************************
//比如534，个位出现53+1=54个；十位出现5*10+10=60个；将3变为1，则出现5*10+5=55个，将3变为0，则出现5*10。
public class Solution {
    public int countDigitOne(int n) {
        if(n <= 0) return 0;
        int helper = n;
        int res = 0;
        int base = 1;
        while(helper > 0) {
            int weight = helper % 10;
            helper /= 10;
            res += base * helper;
            if(weight == 1) {
                res += n % base + 1;
            } else if (weight > 1) {
                res += base;
            }
            base *= 10;
        }
        return res;
    }
}
--------------------------------------------------------------------------
234. Palindrome Linked List
Given a singly linked list, determine if it is a palindrome.
*************************************************************************
public class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode fast = head, slow = head;
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        if (fast != null) { // odd nodes: let right half smaller
            slow = slow.next;
        }
        slow = reverse(slow);
        fast = head;

        while (slow != null) {
            if (fast.val != slow.val) {
                return false;
            }
            fast = fast.next;
            slow = slow.next;
        }
        return true;
    }

    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        while (head != null) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}
--------------------------------------------------------------------------

235. Lowest Common Ancestor of a Binary Search Tree
*************************************************************************
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while ((root.val - p.val) * (root.val - q.val) > 0)
            root = p.val < root.val ? root.left : root.right;
        return root;
        //递归方法
        /*if(root.val<Math.min(p.val,q.val)) return lowestCommonAncestor(root.right,p,q);
        if(root.val>Math.max(p.val,q.val)) return lowestCommonAncestor(root.left,p,q);
        return root;*/
    }
}
--------------------------------------------------------------------------

236. Lowest Common Ancestor of a Binary Tree
*************************************************************************
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
	//发现目标节点则通过返回值标记该子树发现了某个目标结点
        if(root == null || root == p || root == q)  return root;
	//查看左子树中是否有目标结点，没有为null
        TreeNode left = lowestCommonAncestor(root.left, p, q);
	//查看右子树是否有目标节点，没有为null
        TreeNode right = lowestCommonAncestor(root.right, p, q);
	//都不为空，说明做右子树都有目标结点，则公共祖先就是本身
        if(left != null && right != null)   return root;
	//如果发现了目标节点，则继续向上标记为该目标节点
        return left != null ? left : right;
    }
}
--------------------------------------------------------------------------

237. Delete Node in a Linked List
Write a function to delete a node (except the tail) in a singly linked list, 
given only access to that node.
Supposed the linked list is 1 -> 2 -> 3 -> 4 and you are given the third node 
with value 3, the linked list should become 1 -> 2 -> 4 after calling your function.
*************************************************************************
public class Solution {
    public void deleteNode(ListNode node) {
        node.val = node.next.val;
        node.next = node.next.next;
    }
}
--------------------------------------------------------------------------

238. Product of Array Except Self
Given an array of n integers where n > 1, nums, return an array output such that 
output[i] is equal to the product of all the elements of nums except nums[i].
Solve it without division and in O(n).
For example, given [1,2,3,4], return [24,12,8,6].
左面数的积乘以右面数的积
*************************************************************************
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] res = new int[n];
        res[0] = 1;
        for (int i = 1; i < n; i++) {
            res[i] = res[i - 1] * nums[i - 1];
        }
        int right = 1;
        for (int i = n - 1; i >= 0; i--) {
            res[i] *= right;
            right *= nums[i];
        }
        return res;
    }
}
--------------------------------------------------------------------------
239. Sliding Window Maximum
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right.
You can only see the k numbers in the window. Each time the sliding window moves right by one position.
For example,
Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Therefore, return the max sliding window as [3,3,5,5,6,7].
*************************************************************************

public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
	//O(n2)解法
	/*if(nums == null || nums.length == 0) {
            return new int[0];
        }
        int[] res = new int[nums.length - k + 1];
        for(int i = 0; i < nums.length - k + 1; i++) {
            int max = Integer.MIN_VALUE;
            for(int j = i; j < i + k; j++) {
                max = Math.max(nums[j], max);
            }
            res[i] = max;
        }
        return res;*/
        if(nums == null || nums.length == 0) {
            return new int[0];
        }
        int n = nums.length;
        int[] a = new int[n - k + 1];
        int ri = 0;
        Deque<Integer> queue = new LinkedList<>();
        for(int i = 0; i < nums.length; i++) {
            while(!queue.isEmpty() && queue.peek() < i - k + 1) {
                queue.poll();
            }
		// 把队列尾部所有比新数小的都扔掉，保证队列是降序的
            while(!queue.isEmpty() && nums[queue.peekLast()] < nums[i]) {
                queue.pollLast();
            }
            queue.offer(i);
            if(i >= k - 1) {
                a[ri++] = nums[queue.peek()];
            }
        }
        return a;
    }
}
--------------------------------------------------------------------------
240. Search a 2D Matrix II
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
For example,
Consider the following matrix:
[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
Given target = 5, return true.
Given target = 20, return false.
*************************************************************************
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        int row = 0;
        int col = matrix[0].length-1;
        while(col >= 0 && row <= matrix.length-1) {
            if(target == matrix[row][col]) {
                return true;
            } else if(target < matrix[row][col]) {
                col--;
            } else if(target > matrix[row][col]) {
                row++;
            }
        }
        return false;
    }
}
--------------------------------------------------------------------------
242. Valid Anagram
Given two strings s and t, write a function to determine if t is an anagram of s.
For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.
*************************************************************************
public class Solution {
    public boolean isAnagram(String s, String t) {
        int[] a = new int[26];
        for(int i = 0; i < s.length(); i++) {
            a[s.charAt(i) - 'a']++;
        }
        for(int i = 0; i < t.length(); i++) {
            a[t.charAt(i) - 'a']--;
        }
        for(int x : a) {
            if(x != 0) return false;
        }
        return true;
    }
}
--------------------------------------------------------------------------